// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using eWellness.Core;

#nullable disable

namespace eWellness.DL.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20241001205239_seeding-more-data-2")]
    partial class seedingmoredata2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("eWellness.Core.Models.ActivityLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Controller")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Device")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Exception")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LogType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ActivityLogs");
                });

            modelBuilder.Entity("eWellness.Core.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int?>("SpecialOfferId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("SpecialOfferId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClientId = 1,
                            CreatedAt = new DateTime(2024, 10, 1, 22, 52, 38, 798, DateTimeKind.Local).AddTicks(3317),
                            EndTime = new DateTime(2024, 10, 3, 0, 52, 38, 798, DateTimeKind.Local).AddTicks(3323),
                            IsDeleted = false,
                            Notes = "Demo note",
                            ServiceId = 1,
                            StartTime = new DateTime(2024, 10, 2, 23, 52, 38, 798, DateTimeKind.Local).AddTicks(3326),
                            Status = "COMPLETED",
                            TotalPrice = 40m,
                            UpdatedAt = new DateTime(2024, 10, 1, 22, 52, 38, 798, DateTimeKind.Local).AddTicks(3319)
                        },
                        new
                        {
                            Id = 2,
                            ClientId = 2,
                            CreatedAt = new DateTime(2024, 10, 1, 22, 52, 38, 798, DateTimeKind.Local).AddTicks(3330),
                            EndTime = new DateTime(2024, 10, 4, 0, 52, 38, 798, DateTimeKind.Local).AddTicks(3334),
                            IsDeleted = false,
                            Notes = "Demo note",
                            ServiceId = 1,
                            StartTime = new DateTime(2024, 10, 3, 23, 52, 38, 798, DateTimeKind.Local).AddTicks(3336),
                            Status = "RESERVED",
                            TotalPrice = 40m,
                            UpdatedAt = new DateTime(2024, 10, 1, 22, 52, 38, 798, DateTimeKind.Local).AddTicks(3332)
                        });
                });

            modelBuilder.Entity("eWellness.Core.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMember")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastAppointment")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("MembershipExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TotalAppointments")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 10, 1, 22, 52, 38, 798, DateTimeKind.Local).AddTicks(3074),
                            IsDeleted = false,
                            IsMember = true,
                            LastAppointment = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MembershipExpirationDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            TotalAppointments = 0,
                            UpdatedAt = new DateTime(2024, 10, 1, 22, 52, 38, 798, DateTimeKind.Local).AddTicks(3071),
                            UserId = 2
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 10, 1, 22, 52, 38, 798, DateTimeKind.Local).AddTicks(3082),
                            IsDeleted = false,
                            IsMember = true,
                            LastAppointment = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MembershipExpirationDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            TotalAppointments = 0,
                            UpdatedAt = new DateTime(2024, 10, 1, 22, 52, 38, 798, DateTimeKind.Local).AddTicks(3080),
                            UserId = 3
                        });
                });

            modelBuilder.Entity("eWellness.Core.Models.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 10, 1, 22, 52, 38, 798, DateTimeKind.Local).AddTicks(3107),
                            IsDeleted = false,
                            Position = "Admin",
                            Salary = 5000m,
                            UpdatedAt = new DateTime(2024, 10, 1, 22, 52, 38, 798, DateTimeKind.Local).AddTicks(3105),
                            UserId = 1
                        });
                });

            modelBuilder.Entity("eWellness.Core.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("eWellness.Core.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Fees")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 40m,
                            AppointmentId = 1,
                            CreatedAt = new DateTime(2024, 10, 1, 22, 52, 38, 798, DateTimeKind.Local).AddTicks(3355),
                            Date = new DateTime(2024, 10, 1, 22, 52, 38, 798, DateTimeKind.Local).AddTicks(3359),
                            Fees = 0m,
                            IsDeleted = false,
                            PaymentMethodId = 3,
                            TransactionId = new Guid("00000000-0000-0000-0000-000000000000"),
                            UpdatedAt = new DateTime(2024, 10, 1, 22, 52, 38, 798, DateTimeKind.Local).AddTicks(3357)
                        });
                });

            modelBuilder.Entity("eWellness.Core.Models.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 10, 1, 22, 52, 38, 798, DateTimeKind.Local).AddTicks(3248),
                            Description = "Mastercard cards",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Mastercard",
                            UpdatedAt = new DateTime(2024, 10, 1, 22, 52, 38, 798, DateTimeKind.Local).AddTicks(3245)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 10, 1, 22, 52, 38, 798, DateTimeKind.Local).AddTicks(3255),
                            Description = "Visa cards",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Visa",
                            UpdatedAt = new DateTime(2024, 10, 1, 22, 52, 38, 798, DateTimeKind.Local).AddTicks(3253)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 10, 1, 22, 52, 38, 798, DateTimeKind.Local).AddTicks(3261),
                            Description = "American Express kartice",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "AMEX",
                            UpdatedAt = new DateTime(2024, 10, 1, 22, 52, 38, 798, DateTimeKind.Local).AddTicks(3259)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 10, 1, 22, 52, 38, 798, DateTimeKind.Local).AddTicks(3268),
                            Description = "Diners Club cards",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Diners",
                            UpdatedAt = new DateTime(2024, 10, 1, 22, 52, 38, 798, DateTimeKind.Local).AddTicks(3265)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 10, 1, 22, 52, 38, 798, DateTimeKind.Local).AddTicks(3273),
                            Description = "Discovery cards",
                            IsActive = false,
                            IsDeleted = false,
                            Name = "Discovery",
                            UpdatedAt = new DateTime(2024, 10, 1, 22, 52, 38, 798, DateTimeKind.Local).AddTicks(3271)
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 10, 1, 22, 52, 38, 798, DateTimeKind.Local).AddTicks(3284),
                            Description = "Voucher payments",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Voucher",
                            UpdatedAt = new DateTime(2024, 10, 1, 22, 52, 38, 798, DateTimeKind.Local).AddTicks(3282)
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 10, 1, 22, 52, 38, 798, DateTimeKind.Local).AddTicks(3290),
                            Description = "Pay by bank transfer",
                            IsActive = false,
                            IsDeleted = false,
                            Name = "Virman",
                            UpdatedAt = new DateTime(2024, 10, 1, 22, 52, 38, 798, DateTimeKind.Local).AddTicks(3288)
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 10, 1, 22, 52, 38, 798, DateTimeKind.Local).AddTicks(3296),
                            Description = "Cash payment",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Cash",
                            UpdatedAt = new DateTime(2024, 10, 1, 22, 52, 38, 798, DateTimeKind.Local).AddTicks(3294)
                        });
                });

            modelBuilder.Entity("eWellness.Core.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ServiceCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ServiceCategoryId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 10, 1, 22, 52, 38, 798, DateTimeKind.Local).AddTicks(3202),
                            Description = "Massage of the whole body for an hour",
                            Duration = 60,
                            ImageUrl = "https://i1.sndcdn.com/artworks-000135911201-ryi7ns-t500x500.jpg",
                            IsAvailable = true,
                            IsDeleted = false,
                            Name = "Full body massage",
                            Price = 40m,
                            ServiceCategoryId = 1,
                            UpdatedAt = new DateTime(2024, 10, 1, 22, 52, 38, 798, DateTimeKind.Local).AddTicks(3204)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 10, 1, 22, 52, 38, 798, DateTimeKind.Local).AddTicks(3209),
                            Description = "Sauna visit for half an hour",
                            Duration = 30,
                            ImageUrl = "https://i1.sndcdn.com/artworks-000135911201-ryi7ns-t500x500.jpg",
                            IsAvailable = true,
                            IsDeleted = false,
                            Name = "Sauna",
                            Price = 10m,
                            ServiceCategoryId = 3,
                            UpdatedAt = new DateTime(2024, 10, 1, 22, 52, 38, 798, DateTimeKind.Local).AddTicks(3211)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 10, 1, 22, 52, 38, 798, DateTimeKind.Local).AddTicks(3214),
                            Description = "Maderotherapy",
                            Duration = 30,
                            ImageUrl = "https://i1.sndcdn.com/artworks-000135911201-ryi7ns-t500x500.jpg",
                            IsAvailable = true,
                            IsDeleted = false,
                            Name = "Maderotherapy",
                            Price = 50m,
                            ServiceCategoryId = 2,
                            UpdatedAt = new DateTime(2024, 10, 1, 22, 52, 38, 798, DateTimeKind.Local).AddTicks(3215)
                        });
                });

            modelBuilder.Entity("eWellness.Core.Models.ServiceCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ServiceCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 10, 1, 22, 52, 38, 794, DateTimeKind.Local).AddTicks(3622),
                            Description = "Various face and body massages",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Massage",
                            UpdatedAt = new DateTime(2024, 10, 1, 22, 52, 38, 794, DateTimeKind.Local).AddTicks(3615)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 10, 1, 22, 52, 38, 794, DateTimeKind.Local).AddTicks(3664),
                            Description = "Various maderotherapies",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Maderotherapy",
                            UpdatedAt = new DateTime(2024, 10, 1, 22, 52, 38, 794, DateTimeKind.Local).AddTicks(3661)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 10, 1, 22, 52, 38, 794, DateTimeKind.Local).AddTicks(3670),
                            Description = "Spa spaces",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Spa",
                            UpdatedAt = new DateTime(2024, 10, 1, 22, 52, 38, 794, DateTimeKind.Local).AddTicks(3668)
                        });
                });

            modelBuilder.Entity("eWellness.Core.Models.SpecialOffer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OfferExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SpecialOffers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 10, 1, 22, 52, 38, 798, DateTimeKind.Local).AddTicks(3170),
                            Description = "Get three massages for the price of two",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "2 + 1",
                            OfferExpirationDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            UpdatedAt = new DateTime(2024, 10, 1, 22, 52, 38, 798, DateTimeKind.Local).AddTicks(3172)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 10, 1, 22, 52, 38, 798, DateTimeKind.Local).AddTicks(3177),
                            Description = "Get seven sauna visits for the price of five",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "5 + 2",
                            OfferExpirationDate = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            UpdatedAt = new DateTime(2024, 10, 1, 22, 52, 38, 798, DateTimeKind.Local).AddTicks(3179)
                        });
                });

            modelBuilder.Entity("eWellness.Core.Models.Tip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedByUserId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Tips");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 10, 1, 22, 52, 38, 798, DateTimeKind.Local).AddTicks(3140),
                            CreatedByUserId = 1,
                            Description = "Welcome to the app, enjoy it!",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Enjoy :)",
                            UpdatedAt = new DateTime(2024, 10, 1, 22, 52, 38, 798, DateTimeKind.Local).AddTicks(3142)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 10, 1, 22, 52, 38, 798, DateTimeKind.Local).AddTicks(3146),
                            CreatedByUserId = 1,
                            Description = "Cold baths strengthen immunity and improve blood flow.",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Cold baths brrr",
                            UpdatedAt = new DateTime(2024, 10, 1, 22, 52, 38, 798, DateTimeKind.Local).AddTicks(3148)
                        });
                });

            modelBuilder.Entity("eWellness.Core.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyContactPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Test address no1",
                            CreatedAt = new DateTime(2024, 10, 1, 22, 52, 38, 798, DateTimeKind.Local).AddTicks(2939),
                            DateOfBirth = new DateTime(2004, 10, 1, 22, 52, 38, 798, DateTimeKind.Local).AddTicks(2980),
                            Email = "desktop",
                            EmergencyContactName = "N/A",
                            EmergencyContactPhone = "N/A",
                            Gender = "M",
                            IsDeleted = false,
                            Name = "Desktop App",
                            PasswordHash = "Y3s7QeyPY5TE75AKxl/mHGYvfSH/aUjaSkkFr+L+A+xq1OhT",
                            PasswordSalt = "Y3s7QeyPY5TE75AKxl/mHA==",
                            Phone = "0000000000",
                            UpdatedAt = new DateTime(2024, 10, 1, 22, 52, 38, 798, DateTimeKind.Local).AddTicks(2976)
                        },
                        new
                        {
                            Id = 2,
                            Address = "Test address no2",
                            CreatedAt = new DateTime(2024, 10, 1, 22, 52, 38, 798, DateTimeKind.Local).AddTicks(2986),
                            DateOfBirth = new DateTime(2002, 10, 1, 22, 52, 38, 798, DateTimeKind.Local).AddTicks(2990),
                            Email = "mobile",
                            EmergencyContactName = "N/A",
                            EmergencyContactPhone = "N/A",
                            Gender = "M",
                            IsDeleted = false,
                            Name = "Mobile App",
                            PasswordHash = "Y3s7QeyPY5TE75AKxl/mHGYvfSH/aUjaSkkFr+L+A+xq1OhT",
                            PasswordSalt = "Y3s7QeyPY5TE75AKxl/mHA==",
                            Phone = "0000000000",
                            UpdatedAt = new DateTime(2024, 10, 1, 22, 52, 38, 798, DateTimeKind.Local).AddTicks(2988)
                        },
                        new
                        {
                            Id = 3,
                            Address = "Test address no1",
                            CreatedAt = new DateTime(2024, 10, 1, 22, 52, 38, 798, DateTimeKind.Local).AddTicks(2994),
                            DateOfBirth = new DateTime(2000, 10, 1, 22, 52, 38, 798, DateTimeKind.Local).AddTicks(2997),
                            Email = "test_client",
                            EmergencyContactName = "N/A",
                            EmergencyContactPhone = "N/A",
                            Gender = "M",
                            IsDeleted = false,
                            Name = "Test Client",
                            PasswordHash = "Y3s7QeyPY5TE75AKxl/mHGYvfSH/aUjaSkkFr+L+A+xq1OhT",
                            PasswordSalt = "Y3s7QeyPY5TE75AKxl/mHA==",
                            Phone = "0000000000",
                            UpdatedAt = new DateTime(2024, 10, 1, 22, 52, 38, 798, DateTimeKind.Local).AddTicks(2995)
                        });
                });

            modelBuilder.Entity("eWellness.Core.Models.ActivityLog", b =>
                {
                    b.HasOne("eWellness.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eWellness.Core.Models.Appointment", b =>
                {
                    b.HasOne("eWellness.Core.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("eWellness.Core.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("eWellness.Core.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("eWellness.Core.Models.SpecialOffer", "SpecialOffer")
                        .WithMany()
                        .HasForeignKey("SpecialOfferId");

                    b.Navigation("Client");

                    b.Navigation("Employee");

                    b.Navigation("Service");

                    b.Navigation("SpecialOffer");
                });

            modelBuilder.Entity("eWellness.Core.Models.Client", b =>
                {
                    b.HasOne("eWellness.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eWellness.Core.Models.Employee", b =>
                {
                    b.HasOne("eWellness.Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("eWellness.Core.Models.Invoice", b =>
                {
                    b.HasOne("eWellness.Core.Models.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId");

                    b.HasOne("eWellness.Core.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId");

                    b.Navigation("Appointment");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("eWellness.Core.Models.Payment", b =>
                {
                    b.HasOne("eWellness.Core.Models.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId");

                    b.HasOne("eWellness.Core.Models.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId");

                    b.Navigation("Appointment");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("eWellness.Core.Models.Service", b =>
                {
                    b.HasOne("eWellness.Core.Models.ServiceCategory", "ServiceCategory")
                        .WithMany()
                        .HasForeignKey("ServiceCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ServiceCategory");
                });

            modelBuilder.Entity("eWellness.Core.Models.Tip", b =>
                {
                    b.HasOne("eWellness.Core.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId");

                    b.Navigation("CreatedByUser");
                });
#pragma warning restore 612, 618
        }
    }
}
